1. Los nombres de variables se escriben con la convencion de Java, tomando como nombres un identificador, seguido por el tipo, ejemplo:
	
	ListGridField codeGridField = new ListGridField();
	DynamicForm userForm = new DynamicForm();

Esto se hace para poder identifcar la variable en cualquier lugar donde se use.

2. Es de suma importancia la lectura de las dos ediciones del libro effective Java, para usar las mejores practicas en cuanto a la programacion en JAva
3. Mientras sea posible utilizar una estrategia Lazy a la hora de crear variables (effective java)
4. En la medida de lo posible y razonable, nos conviene hacer subclases de los componentes del framework para evitar codigo boilerplate, ejemplp
	
		ListGridField brandGridField = new ListGridField();
		brandGridField.setName("brand");
		brandGridField.setTitle("Marca");
		brandGridField.setAlign(Alignment.CENTER);
		brandGridField.setPrompt("Marca del equipo");

	En caso de identificarse que estos metodos se usan mucho, esta clase puede reemplazarse por una subclase con un constructor que nos ayude a reducir codigo, 
	y mejore la sinergia del grupo de trabajo
	
		GHAGridField brandGridField = new GHAGridField("brand", "Marca",Alignment.CENTER,"Marca del equipo");
		
5. Para los logs de excepciones en los servicios EJB a menos que sea necesario, a fin de mantener la uniformidad seria recomendable utilizar la siguiente estructura:

		logger.log(Level, message, exception)

	y luego arrojar una excepcion de tipo EJBException, especificando en el mensaje la causa del error (esto ultimo sera solo para el desarrollo), para presentarla en el cliente.


6. Los metodos update y save en los servicios EJB deben retornar una instancia de la entidad salvada o actualizada respectivamente
	Para lograr esto revisar EiaTypeService.java y EiaTypeServiceRemote.java (si tienen una mejor forma de hacerlo es bienvenida para discutirla)

7. Eclipse trae una funcionalidad que permite ordenar los miembros de las clases "sort members", es recomendable trabajar con las funciones ordenadas
alfabeticamente dentro del codigo para facilitar las busquedas y contribuir al orden general

Recuerden que estas practicas estan destinadas a reducir el tiempo de compresion del codigo, mejoran nuestra comunicacion y hacen mas transparente el trabajo en conjunto
